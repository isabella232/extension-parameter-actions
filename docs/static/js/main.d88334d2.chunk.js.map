{"version":3,"sources":["Selected.tsx","Selector.tsx","Setting.tsx","Configure.tsx","ParameterActions.tsx","Home.tsx","index.tsx"],"names":["Selected","props","react","className","selecting","selected","tableau_ui_min","onClick","onClear","style","display","nextConfig","marginLeft","displayName","Selector","dropdownSelectProps","disabled","enabled","kind","onChange","onSelect","value","buttonProps","list","map","option","key","dashboard","Setting","config","Selected_Selected","Selector_Selector","renderSelectElement","dataType","Configure","state","configured","delimiter","field","field_config","field_enabled","field_list","keepOnDeselect","multiselect","param_config","param_enabled","param_list","parameter","worksheets","ws_config","ws_enabled","ws_list","paramChange","e","_this","setState","target","fieldChange","multiChange","checked","deselectChange","delimiterChange","handleCheckWrapper","find","ws","included","clearWS","populateWS","setField","testWSSettings","clearField","populateFieldList","setParam","testFieldSettings","clearParam","populateParamList","submit","window","tableau","extensions","settings","set","JSON","stringify","saveAsync","then","ui","closeDialog","clearSettings","_this2","this","getAll","wsSettings","parse","fetchPromises","wsnames","wslist","forEach","worksheet","push","name","getSummaryDataAsync","Promise","all","dataTables","_loop","dt","hasOwnProperty","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","columns","Symbol","iterator","next","done","fieldName","i","err","return","_this3","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this4","fieldSetting","findParameterAsync","param","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","f","_this5","fields","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","options","_i","_fields","length","concat","_this6","paramSetting","allowableValues","type","_this7","getParametersAsync","params","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","p","_this8","initializeDialogAsync","dashboardContent","testParamSettings","_this9","xmlns","id","width","height","viewBox","x","y","fillRule","clipRule","fill","d","Setting_Setting","children","marginTop","alignItems","flex","textAlign","marginRight","maxLength","marginBottom","filter","React","Home","rel","media","href","ParameterActions","mode","valid","getMarks","selection","getMarksAsync","marks","updateParam","configure","popupUrl","location","origin","process","displayDialogAsync","validate","catch","error","errorCode","ErrorCodes","DialogClosedByUser","console","log","message","validws","wsset","l","listen","removeEventListener","TableauEventType","MarkSelectionChanged","wsname","w","getSelectedMarksAsync","addEventListener","index","data","output","c","Array","from","Set","join","date","Date","getFullYear","getMonth","getDate","changeValueAsync","initializeAsync","environment","status","cogColor","color","title","aria-labelledby","data-prefix","data-icon","role","data-fa-i2svg","PrimaryLayout","react_router","path","exact","component","App","react_router_dom","src_PrimaryLayout","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d88334d2.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Button } from '@tableau/tableau-ui';\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nexport interface SelectedProps {\r\n    nextConfig?: boolean;\r\n    onClear: () => void;\r\n    selected: string;\r\n    selecting: string;\r\n}\r\n\r\n// An individual setting that has been set\r\nexport const Selected: React.SFC<SelectedProps> = (props) => {\r\n    return (\r\n        <div className='selected'>\r\n            <p><i>The {props.selecting} <b>{props.selected}</b> has been selected</i></p>\r\n            <Button onClick={props.onClear} style={{ display: props.nextConfig ? 'none' : 'block', marginLeft: '12px' }}>Clear</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSelected.displayName = 'Selected';\r\n","import * as React from 'react';\r\n\r\nimport { Button, ButtonProps, DropdownSelect, DropdownSelectProps } from '@tableau/tableau-ui';\r\n\r\nexport interface SelectorProps {\r\n    enabled: boolean;\r\n    list: string[];\r\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onClick: () => void;\r\n    selected: string;\r\n}\r\n\r\n// Shows if setting has not yet been configured\r\nexport const Selector: React.SFC<SelectorProps> = (props) => {\r\n    const dropdownSelectProps: DropdownSelectProps = {\r\n        className: 'dropdown-select',\r\n        disabled: !props.enabled,\r\n        kind: 'line',\r\n        onChange: props.onChange,\r\n        onSelect: props.onChange,\r\n        value: props.selected,\r\n    };\r\n\r\n    const buttonProps: ButtonProps = {\r\n        disabled: !props.enabled || props.selected === '',\r\n        kind: 'filledGreen',\r\n        onClick: props.onClick,\r\n        style: { marginLeft: '12px' },\r\n    };\r\n\r\n    return (\r\n        <div className='controls'>\r\n            <DropdownSelect {...dropdownSelectProps}>\r\n                {props.list.map(option => <option key={option}>{option}</option>)}\r\n            </DropdownSelect>\r\n            <Button {...buttonProps}>Set</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSelector.displayName = 'Selector';\r\n","import * as React from 'react';\r\nimport { Selected } from './Selected';\r\nimport { Selector } from './Selector';\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nexport interface SettingProps {\r\n    config: boolean;\r\n    enabled: boolean;\r\n    list: string[];\r\n    nextConfig?: boolean;\r\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onClear: () => void;\r\n    onClick: () => void;\r\n    selected: string;\r\n    selecting: string;\r\n}\r\n\r\nexport const Setting: React.SFC<SettingProps> = (props) => {\r\n    return (\r\n        <div className='select'>\r\n            <p>Select a {props.selecting}</p>\r\n            {renderSelectElement(props)}\r\n        </div>\r\n    );\r\n};\r\n\r\nSetting.displayName = 'Setting';\r\n\r\nfunction renderSelectElement(props: SettingProps): JSX.Element {\r\n    const { config, enabled, list, nextConfig, onChange, onClear, onClick, selected, selecting } = props;\r\n\r\n    return config ? <Selected nextConfig={nextConfig} onClear={onClear} selected={selected} selecting={selecting} /> :\r\n                    <Selector enabled={enabled} list={list} onChange={onChange} onClick={onClick} selected={selected} />;\r\n}\r\n","import * as React from 'react';\r\n\r\nimport { Button, Checkbox, TextField } from '@tableau/tableau-ui';\r\nimport { Setting } from './Setting';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nlet dashboard: any;\r\n\r\ninterface State {\r\n    configured: boolean,\r\n    dataType: string,\r\n    delimiter: string,\r\n    field: string,\r\n    field_config: boolean,\r\n    field_enabled: boolean,\r\n    field_list: string[],\r\n    keepOnDeselect: boolean,\r\n    multiselect: boolean,\r\n    param_config: boolean,\r\n    param_enabled: boolean,\r\n    param_list: string[],\r\n    parameter: string,\r\n    worksheets: any[],\r\n    ws_config: boolean,\r\n    ws_enabled: boolean,\r\n    ws_list: string[],\r\n}\r\n\r\nconst NoOpenInputParameters: string = 'No open input parameters!';\r\n\r\n// Container for all configurations\r\nclass Configure extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        configured: false,\r\n        dataType: 'string',\r\n        delimiter: '|',\r\n        field: '',\r\n        field_config: false,\r\n        field_enabled: false,\r\n        field_list: [],\r\n        keepOnDeselect: false,\r\n        multiselect: false,\r\n        param_config: false,\r\n        param_enabled: false,\r\n        param_list: [],\r\n        parameter: '',\r\n        worksheets: [],\r\n        ws_config: false,\r\n        ws_enabled: false,\r\n        ws_list: [],\r\n    };\r\n\r\n    // Handles selection in parameter dropdown\r\n    public paramChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ parameter: e.target.value });\r\n    };\r\n\r\n    // Handles selection in field dropdown\r\n    public fieldChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ field: e.target.value });\r\n    };\r\n\r\n    // Handles change in multiselect checkbox\r\n    public multiChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ multiselect: e.target.checked });\r\n    };\r\n\r\n    // Handles change in multiselect checkbox\r\n    public deselectChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ keepOnDeselect: e.target.checked });\r\n    };\r\n\r\n    // Handles change in multiselect checkbox\r\n    public delimiterChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ delimiter: e.target.value });\r\n    };\r\n\r\n    public handleCheckWrapper = (key: string): ((e: React.ChangeEvent<HTMLInputElement>) => void) => {\r\n        return (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            const worksheets = this.state.worksheets;\r\n            worksheets.find(ws => ws.key === key).included = e.target.checked;\r\n            this.setState({ worksheets });\r\n        };\r\n    }\r\n\r\n    // Tests if currently set Worksheet to pull filters from exists\r\n    public testWSSettings() {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            const wsSettings = JSON.parse(settings.worksheets);\r\n            const fetchPromises: any[] = [];\r\n            const wsnames: string[] = [];\r\n            const wslist: any[] = [];\r\n            dashboard.worksheets.forEach((worksheet: any) => {\r\n                wsnames.push(worksheet.name);\r\n                fetchPromises.push(worksheet.getSummaryDataAsync());\r\n            });\r\n            Promise.all(fetchPromises).then(dataTables => {\r\n                for (const dt in dataTables) {\r\n                    if (dataTables.hasOwnProperty(dt)) {\r\n                        for (const f of dataTables[dt].columns) {\r\n                            if (f.fieldName === this.state.field) {\r\n                                let i = false;\r\n                                if (wsSettings.find((ws: any) => ws.worksheet === wsnames[dt])) {\r\n                                    i = wsSettings.find((ws: any) => ws.worksheet === wsnames[dt]).included\r\n                                }\r\n                                wslist.push({ key: dt, included: i, worksheet: wsnames[dt] });\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.setState({\r\n                    worksheets: wslist,\r\n                    ws_enabled: false,\r\n                });\r\n            });\r\n\r\n        } else {\r\n            this.populateWS();\r\n        }\r\n    }\r\n\r\n    // Populates list of worksheets\r\n    public populateWS() {\r\n        const fetchPromises: any[] = [];\r\n        const wsnames: string[] = [];\r\n        const wslist: any[] = [];\r\n        dashboard.worksheets.forEach((worksheet: any) => {\r\n            wsnames.push(worksheet.name);\r\n            fetchPromises.push(worksheet.getSummaryDataAsync());\r\n        });\r\n        Promise.all(fetchPromises).then(dataTables => {\r\n            for (const dt in dataTables) {\r\n                if (dataTables.hasOwnProperty(dt)) {\r\n                    for (const f of dataTables[dt].columns) {\r\n                        if (f.fieldName === this.state.field) {\r\n                            wslist.push({ key: dt, included: true, worksheet: wsnames[dt] });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.setState({\r\n                worksheets: wslist,\r\n                ws_enabled: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    // Clears which worksheet to use for filters\r\n    public clearWS = (): void => {\r\n        this.setState({\r\n            configured: false,\r\n            field_enabled: false,\r\n            ws_config: false,\r\n            ws_enabled: true,\r\n        });\r\n        this.populateWS();\r\n    }\r\n\r\n    // Tests if currently set Field to pull domain from exists\r\n    public testFieldSettings() {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            const fieldSetting = settings.field;\r\n            let dataType: string;\r\n            dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\r\n                dataType = param.dataType;\r\n                this.setState({dataType});\r\n            })\r\n                .then(() => {\r\n                    let field = false;\r\n                    const fetchPromises: any[] = [];\r\n                    dashboard.worksheets.forEach((worksheet: any) => {\r\n                        fetchPromises.push(worksheet.getSummaryDataAsync());\r\n                    });\r\n                    Promise.all(fetchPromises).then(dataTables => {\r\n                        for (const dt of dataTables) {\r\n                            for (const f of dt.columns) {\r\n                                if (f.fieldName === fieldSetting && f.dataType === dataType) {\r\n                                    field = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (field) { break; }\r\n                        }\r\n                        if (field) {\r\n                            this.setState({\r\n                                field: fieldSetting,\r\n                                field_config: true,\r\n                                field_enabled: false,\r\n                            });\r\n                            this.testWSSettings();\r\n                        } else {\r\n                            this.populateFieldList();\r\n                        }\r\n                    });\r\n                });\r\n        } else {\r\n            this.populateFieldList();\r\n        }\r\n    }\r\n\r\n    // Gets list of fields\r\n    public populateFieldList() {\r\n        let dataType: string;\r\n        dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\r\n            dataType = param.dataType;\r\n            this.setState({dataType});\r\n        })\r\n            .then(() => {\r\n                const fetchPromises: any[] = [];\r\n                const fields: any[] = [];\r\n                dashboard.worksheets.forEach((worksheet: any) => {\r\n                    fetchPromises.push(worksheet.getSummaryDataAsync());\r\n                });\r\n                Promise.all(fetchPromises).then(dataTables => {\r\n                    for (const dt of dataTables) {\r\n                        for (const f of dt.columns) {\r\n                            if (f.dataType === dataType && f.fieldName !== 'Measure Names' && f.fieldName !== 'Measure Values') {\r\n                                fields.push(f.fieldName);\r\n                            }\r\n                        }\r\n                    }\r\n                    const options: string[] = [];\r\n                    for (const f of fields) {\r\n                        options.push(f);\r\n                    }\r\n                    if (options.length > 0) {\r\n                        this.setState({\r\n                            field: options[0],\r\n                            field_enabled: true,\r\n                            field_list: options,\r\n                        });\r\n                    } else {\r\n                        const field: string = `No ${dataType} fields in dashboard worksheets!`;\r\n                        this.setState({\r\n                            field,\r\n                            field_enabled: false,\r\n                            field_list: [field],\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    // Sets the field to pull values from for Data-Driven Parameter\r\n    public setField = (): void => {\r\n        if (this.state.field !== '') {\r\n            this.setState({\r\n                field_config: true,\r\n                field_enabled: false,\r\n            });\r\n            this.testWSSettings();\r\n        }\r\n    }\r\n\r\n    // Clears the field to pull values from for Data-Driven Parameter\r\n    public clearField = (): void => {\r\n        this.setState({\r\n            configured: false,\r\n            field_config: false,\r\n            field_enabled: true,\r\n            worksheets: [],\r\n            ws_enabled: false,\r\n        });\r\n        this.populateFieldList();\r\n    }\r\n\r\n    // Tests if currently set Parameter exists and accepts all values\r\n    public testParamSettings() {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            const paramSetting = settings.parameter;\r\n            dashboard.findParameterAsync(paramSetting).then((param: any) => {\r\n                if (param && param.allowableValues.type === 'all') {\r\n                    this.setState({\r\n                        param_config: true,\r\n                        param_enabled: false,\r\n                        parameter: param.name,\r\n                    });\r\n                    this.testFieldSettings();\r\n                } else {\r\n                    this.populateParamList();\r\n                }\r\n            });\r\n        } else {\r\n            this.populateParamList();\r\n        }\r\n    }\r\n\r\n    // Gets list of parameters in workbook and populates dropdown\r\n    public populateParamList() {\r\n        dashboard.getParametersAsync().then((params: any) => {\r\n            const options: string[] = [];\r\n            for (const p of params) {\r\n                if (p.allowableValues.type === 'all') {\r\n                    options.push(p.name);\r\n                }\r\n            }\r\n\r\n            if (options.length > 0) {\r\n                this.setState({\r\n                    param_enabled: true,\r\n                    param_list: options,\r\n                    parameter: options[0],\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    param_enabled: false,\r\n                    param_list: [NoOpenInputParameters],\r\n                    parameter: NoOpenInputParameters,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Sets which tableau parameter to update\r\n    public setParam = (): void => {\r\n        if (this.state.parameter !== '') {\r\n            this.setState({\r\n                param_config: true,\r\n                param_enabled: false,\r\n            });\r\n            this.testFieldSettings();\r\n        }\r\n    }\r\n\r\n    // Clear which tableau parameter to update\r\n    public clearParam = (): void => {\r\n        this.setState({\r\n            dataType: 'string',\r\n            field: '',\r\n            field_enabled: false,\r\n            param_config: false,\r\n            param_enabled: true,\r\n        });\r\n        this.populateParamList();\r\n    }\r\n\r\n    // Saves settings and closes configure dialog with data source payload\r\n    public submit = (): void => {\r\n        window.tableau.extensions.settings.set('parameter', this.state.parameter);\r\n        window.tableau.extensions.settings.set('delimiter', this.state.delimiter);\r\n        window.tableau.extensions.settings.set('worksheets', JSON.stringify(this.state.worksheets));\r\n        window.tableau.extensions.settings.set('field', this.state.field);\r\n        window.tableau.extensions.settings.set('keepOnDeselect', JSON.stringify(this.state.keepOnDeselect));\r\n        window.tableau.extensions.settings.set('multiselect', JSON.stringify(this.state.multiselect && this.state.dataType === 'string'));\r\n        window.tableau.extensions.settings.set('configured', 'true');\r\n        window.tableau.extensions.settings.saveAsync().then(() => {\r\n            window.tableau.extensions.ui.closeDialog('true');\r\n        });\r\n    }\r\n\r\n    // Clears settings and states\r\n    public clearSettings = (): void => {\r\n        this.setState({\r\n            configured: false,\r\n            dataType: 'string',\r\n            field: '',\r\n            field_config: false,\r\n            field_enabled: false,\r\n            field_list: [],\r\n            multiselect: false,\r\n            param_config: false,\r\n            param_enabled: false,\r\n            param_list: [],\r\n            parameter: '',\r\n            worksheets: [],\r\n            ws_config: false,\r\n            ws_enabled: false,\r\n            ws_list: [],\r\n        });\r\n        this.populateParamList();\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeDialogAsync().then(() => {\r\n            dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured === 'true') {\r\n                this.setState({\r\n                    configured: true,\r\n                    delimiter: settings.delimiter,\r\n                    keepOnDeselect: settings.keepOnDeselect === 'true',\r\n                    multiselect: settings.multiselect === 'true',\r\n                })\r\n                this.testParamSettings();\r\n            } else {\r\n                this.populateParamList();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className='container'>\r\n                    <div>\r\n                        <div className='header'>\r\n                            Parameter Actions Configuration\r\n                        <div className='tooltip'>\r\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\r\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                </svg>\r\n                                <span className='tooltiptext'>\r\n                                    <p>Update a parameter's value based on worksheet selections.</p>\r\n                                    <b>How to Use</b>\r\n                                    <ol>\r\n                                        <li>Select a pre-existing parameter for the extension to manipulate.</li>\r\n                                        <li>Choose a field to populate the parameter on selection.</li>\r\n                                        <li>Choose which worksheet(s) to listen to for selections.</li>\r\n                                        <li><i>Optional: </i> Choose if you want keep the last selected values after deselection.</li>\r\n                                        <li><i>Optional: </i> Choose if you want to allow multi-select mode and if so, your delimiter.</li>\r\n                                    </ol>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='title'>Configure Action</div>\r\n                        <Setting selecting='parameter' onClick={this.setParam} onClear={this.clearParam} config={this.state.param_config} nextConfig={this.state.field_config} selected={this.state.parameter} enabled={this.state.param_enabled} list={this.state.param_list} onChange={this.paramChange} />\r\n                        <Setting selecting='field' onClick={this.setField} onClear={this.clearField} config={this.state.field_config} nextConfig={this.state.ws_config} selected={this.state.field} enabled={this.state.field_enabled} list={this.state.field_list} onChange={this.fieldChange} />\r\n                        <div className='select'>\r\n                            <p>Select worksheets for the select action</p>\r\n                            <div className='scrolly'>\r\n                                {this.state.worksheets.map((option: any) => (\r\n                                    <div className='scrollitem' key={option.key}>\r\n                                        <Checkbox key={option.key} checked={option.included} children={option.worksheet} onChange={this.handleCheckWrapper(option.key)} />\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                        <Checkbox checked={this.state.keepOnDeselect} onChange={this.deselectChange} children='Persist selections on deselect' style={{ marginLeft: '11px', marginTop: '12px', display: 'flex', alignItems: 'center' }} />\r\n                        <Checkbox checked={this.state.multiselect && this.state.dataType === 'string'} onChange={this.multiChange} children='Allow multiple selections (string parameters only)' style={{ marginLeft: '11px', marginTop: '12px', display: 'flex', alignItems: 'center' }} disabled={this.state.dataType !== 'string'}/>\r\n                        <div style={{ display: (this.state.multiselect  && this.state.dataType === 'string') ? 'flex' : 'none', alignItems: 'center', flex: 1, textAlign: 'right', marginLeft: '30px' }}>\r\n                            <span children='Use this character as a separator:' style={{ marginRight: '5px' }} />\r\n                            <TextField kind='line' onChange={this.delimiterChange} className='delimiter-text-field' value={this.state.delimiter} disabled={!this.state.multiselect  && this.state.dataType === 'string'} maxLength={1} style={{ marginBottom: 6, width: 20 }} />\r\n                        </div>\r\n                    </div>\r\n                    <div className='footer'>\r\n                        <div className='btncluster'>\r\n                            <Button kind='outline' onClick={this.clearSettings} style={{ marginRight: 'auto' }}>Clear Settings</Button>\r\n                            <Button kind='filledGreen' onClick={this.submit} disabled={this.state.worksheets.filter(ws => ws.included === true).length === 0} style={{ marginLeft: '12px' }}>OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configure;","import * as React from 'react';\r\nimport './style.css';\r\n\r\n/* tslint:disable:no-console */\r\n\r\ndeclare global {\r\n    interface Window { tableau: any; }\r\n}\r\n\r\nlet dashboard: any;\r\nlet dataType: string;\r\n\r\ninterface State {\r\n    configured: boolean,\r\n    valid: boolean,\r\n    mode: string,\r\n}\r\n\r\nclass ParameterActions extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        configured: false,\r\n        mode: 'authoring',\r\n        valid: false,\r\n    };\r\n\r\n    public validate(settings: any) {\r\n        const validws: any[] = [];\r\n        const pset = settings.parameter;\r\n        if (pset) {\r\n            dashboard.findParameterAsync(settings.parameter).then((param: any) => {\r\n                if (param && param.allowableValues.type === 'all') {\r\n                    dataType = param.dataType;\r\n                    const wsset = JSON.parse(settings.worksheets);\r\n                    const fetchPromises: any[] = [];\r\n                    const wsnames: any[] = [];\r\n                    if (wsset) {\r\n                        dashboard.worksheets.filter((ws: any) => {\r\n                            if (wsset.find((l: any) => l.worksheet === ws.name && l.included)) {\r\n                                return true;\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        }).forEach((worksheet: any) => {\r\n                            if (worksheet) {\r\n                                wsnames.push(worksheet.name);\r\n                                fetchPromises.push(worksheet.getSummaryDataAsync());\r\n                            }\r\n                        });\r\n                        Promise.all(fetchPromises).then(dataTables => {\r\n                            for (const dt in dataTables) {\r\n                                if (dataTables.hasOwnProperty(dt)) {\r\n                                    for (const f of dataTables[dt].columns) {\r\n                                        if (f.fieldName === settings.field && f.dataType === dataType) {\r\n                                            validws.push(wsnames[dt]);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (validws.length > 0) {\r\n                                this.setState({ valid: true });\r\n                                this.listen(validws);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public listen(validws: any) {\r\n        for (const worksheet of dashboard.worksheets) {\r\n            worksheet.removeEventListener(window.tableau.TableauEventType.MarkSelectionChanged, this.getMarks);\r\n        }\r\n\r\n        for (const wsname of validws) {\r\n            const worksheet = dashboard.worksheets.find((w: any) => w.name === wsname);\r\n            // Load any current selections into parameter, this ensure selections still work if selection causes reload.\r\n            worksheet.getSelectedMarksAsync().then((marks: any) => {\r\n                this.updateParam(marks)\r\n            });\r\n            \r\n            worksheet.addEventListener(window.tableau.TableauEventType.MarkSelectionChanged, this.getMarks);\r\n        }\r\n    }\r\n\r\n    // public getMarks(selection: any) {\r\n    public getMarks = (selection: any): void => {\r\n        selection.getMarksAsync().then((marks: any) => {\r\n            this.updateParam(marks)\r\n        })\r\n    }\r\n    \r\n    public updateParam(marks: any) {\r\n        const settings = window.tableau.extensions.settings.getAll();\r\n        let index: number = 0;\r\n        let data: any[] = [];\r\n        let output: string = '';\r\n        for (const c of marks.data[0].columns) {\r\n            if (c.fieldName === settings.field) {\r\n                index = c.index;\r\n            }\r\n        }\r\n        for (const d of marks.data[0].data) {\r\n            data.push(d[index].value);\r\n        }\r\n        data = Array.from(new Set(data));\r\n        if (settings.multiselect === 'true' && dataType === 'string') {\r\n            output = data.join(settings.delimiter)\r\n        } else {\r\n            output = data[0];\r\n        }\r\n        if (settings.keepOnDeselect === 'true' && !output) {\r\n            return;\r\n        }\r\n        if (settings.keepOnDeselect === 'false' && marks.data[0].data.length === 0) {\r\n            switch (dataType) {\r\n                case 'float':\r\n                case 'int':\r\n                    output = '0'\r\n                    break;\r\n                case 'string':\r\n                    output = '';\r\n                    break;\r\n                case 'date':\r\n                case 'date-time':\r\n                    const date = new Date();\r\n                    output = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\r\n                    break;\r\n                default:\r\n                    output = '0';\r\n            }\r\n        }\r\n        dashboard.findParameterAsync(settings.parameter).then((param: any) => {\r\n            param.changeValueAsync(output);\r\n        });\r\n    }\r\n\r\n    // Pops open the configure page\r\n    public configure = (): void => {\r\n        const popupUrl = `${window.location.origin}${process.env.PUBLIC_URL}/#/config`;\r\n        const payload = '';\r\n        window.tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 420, width: 420 }).then(() => {\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            this.setState({ configured: true })\r\n            this.validate(settings);\r\n        }).catch((error: any) => {\r\n            switch (error.errorCode) {\r\n                case window.tableau.ErrorCodes.DialogClosedByUser:\r\n                    const settings = window.tableau.extensions.settings.getAll();\r\n                    if (settings.configured === 'true') {\r\n                        this.setState({ configured: true })\r\n                        this.validate(settings);\r\n                    }\r\n                    console.log('Dialog was closed by user.');\r\n                    break;\r\n                default:\r\n                    console.error(error.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        window.tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\r\n            dashboard = window.tableau.extensions.dashboardContent.dashboard;\r\n            this.setState({\r\n                mode: window.tableau.extensions.environment.mode,\r\n            });\r\n            console.log(window.tableau.extensions.environment.mode);\r\n            const settings = window.tableau.extensions.settings.getAll();\r\n            if (settings.configured !== 'true') {\r\n                this.configure();\r\n            } else {\r\n                this.setState({ configured: true })\r\n                this.validate(settings);\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let status = 'Looking for extension configuration.';\r\n        let cogColor = 'rgba(0, 0, 0, 0.8)';\r\n        if (this.state.configured && this.state.valid) {\r\n            status = 'Extension is configured and valid. This cog will disappear in viewing mode.';\r\n            cogColor = 'rgba(0, 0, 0, 0.8)';\r\n        } else if (this.state.configured) {\r\n            status = 'Extension is configured but not valid.';\r\n            cogColor = '#C93A47';\r\n        } else {\r\n            status = 'Extension requires configuring';\r\n            cogColor = '#C93A47';\r\n        }\r\n        return (\r\n            <div className={'cog ' + this.state.mode}>\r\n                <div style={{ color: cogColor }} title='This cog will not show in viewer mode.'>\r\n                    <svg className='svg-inline--fa fa-cog fa-w-16 fa-2x click' onClick={this.configure} aria-labelledby='svg-inline--fa-title-1' data-prefix='fas' data-icon='cog' role='img' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' data-fa-i2svg='true'>\r\n                        <path fill='currentColor' d='M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z' />\r\n                    </svg>\r\n                </div>\r\n                <div>\r\n                    <p>{status}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ParameterActions;","import * as React from 'react';\nimport './home.css';\n\nclass Home extends React.Component<any, any> {\n\tpublic render() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<link rel='stylesheet' type='text/css' media='screen' href='home.css' />\n\t\t\t\t<div className='icontainer'>\n\t\t\t\t\t<div className='box'>\n\t\t\t\t\t\t<div className='left'>\n\t\t\t\t\t\t\t<h1 className='iheader'>Parameter Actions Extension</h1>\n\t\t\t\t\t\t\t<span className='tagline'>A Tableau extension that allows you to update parameter values from worksheet selections.</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='right'>\n\t\t\t\t\t\t\t<h4 className='big'>What is it?</h4>\n\t\t\t\t\t\t\t<p>With this extension you can simply click on a mark or multiple marsk on a worksheet and update a parameter with those values.</p>\n\t\t\t\t\t\t\t<h4 className='big'>Using the Extension</h4>\n\t\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t\t<li>Select a pre-existing parameter for the extension to manipulate.</li>\n\t\t\t\t\t\t\t\t<li>Choose a field to populate the parameter on selection.</li>\n\t\t\t\t\t\t\t\t<li>Choose which worksheet(s) to listen to for selections.</li>\n\t\t\t\t\t\t\t\t<li><i>Optional: </i> Choose if you want keep the last selected values after deselection.</li>\n\t\t\t\t\t\t\t\t<li><i>Optional: </i> Choose if you want to allow multi-select mode and if so, your delimiter.</li>\n\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t<div className='gh'>\n\t\t\t\t\t\t\tGet this extension and more in the <a href='https://extensiongallery.tableau.com/'>Extension Gallery</a>.\n\t\t\t\t\t\t\t\t{/* <a href='https://github.com/tableau/extension-parameter-actions'>View on GitHub</a> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Home;","import 'react-app-polyfill/ie11';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Configure from './Configure';\nimport Home from './Home';\nimport ParameterActions from './ParameterActions';\n\nconst PrimaryLayout = () => (\n  <React.Fragment>\n      <Route path='/' exact={true} component={Home} />\n      <Route path='/paramact' component={ParameterActions} />\n      <Route path='/config' component={Configure} />\n  </React.Fragment>\n)\n\nclass App extends React.Component {\n  public render() {\n      return (\n          <HashRouter>\n              <PrimaryLayout />\n          </HashRouter>\n      )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n"],"sourceRoot":""}